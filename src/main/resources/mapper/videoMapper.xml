<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzd.giligili.dao.VideoDao">

    <insert id="addVideo" parameterType="com.zzd.giligili.domain.Video"
                useGeneratedKeys="true" keyProperty="id">
        insert into
            t_video(
                id,
                userId,
                url,
                thumbnail,
                title,
                `type`,
                duration,
                area,
                description,
                createTime
            )values(
                #{id},
                #{userId},
                #{url},
                #{thumbnail},
                #{title},
                #{type},
                #{duration},
                #{area},
                #{description},
                #{createTime}
            )
    </insert>

    <update id="batchAddVideoTags" parameterType="java.util.List">
        insert into
            t_video_tag(
                videoId,
                tagId,
                createTime
            ) values
            <foreach collection="videoTagList" item="videoTag" separator=",">
                (
                    #{videoTag.videoId},
                    #{videoTag.tagId},
                    #{videoTag.createTime}
                )
            </foreach>
    </update>

    <select id="countVideos" parameterType="java.util.Map" resultType="java.lang.Integer">
        select
            count(1)
        from
            t_video
        where
            1=1
            <if test="area != null and area != ''">
                and area = #{area}
            </if>
    </select>

    <select id="pageListVideos" parameterType="java.util.Map"
            resultType="com.zzd.giligili.domain.Video">
        select
            *
        from
            t_video
        where
            1=1
            <if test="area != null and area != ''">
                and area = #{area}
            </if>
        order by id desc
        limit #{start}, #{limit}
    </select>

    <select id="getVideoById" parameterType="java.lang.Long" resultType="com.zzd.giligili.domain.Video">
        select
            *
        from
            t_video
        where
            id = #{id}
    </select>

    <insert id="addVideoLike" parameterType="com.zzd.giligili.domain.VideoLike">
        insert into
            t_video_like(
                userId,
                videoId,
                createTime
        )values(
                   #{userId},
                   #{videoId},
                   #{createTime}
               )
    </insert>

    <delete id="deleteVideoLike">
        delete from
            t_video_like
        where
            videoId = #{videoId}
            and userId = #{userId}
    </delete>

    <select id="getVideoLikes" parameterType="java.lang.Long" resultType="java.lang.Long">
        select
            count(1)
        from
            t_video_like
        where
            videoId = #{videoId}
    </select>

    <select id="getVideoLikeByVideoIdAndUserId" resultType="com.zzd.giligili.domain.VideoLike">
        select
            *
        from
            t_video_like
        where
            videoId = #{videoId}
            and userId = #{userId}
    </select>


    <insert id="addVideoCollection" parameterType="com.zzd.giligili.domain.VideoCollection">
        insert into
            t_video_collection(
                userId,
                videoId,
                groupId,
                createTime
        )values(
               #{userId},
               #{videoId},
               #{groupId},
               #{createTime}
        )
    </insert>

    <delete id="deleteVideoCollection">
        delete from
            t_video_collection
        where
            videoId = #{videoId}
            and userId = #{userId}
    </delete>

    <select id="getVideoCollections" parameterType="java.lang.Long" resultType="java.lang.Long">
        select
            count(1)
        from
            t_video_collection
        where
            videoId = #{videoId}
    </select>

    <select id="getVideoCollectionByVideoIdAndUserId" resultType="com.zzd.giligili.domain.VideoCollection">
        select
            *
        from
            t_video_collection
        where
            videoId = #{videoId}
            and userId = #{userId}
    </select>

    <select id="getVideoCoinByVideoIdAndUserId" resultType="com.zzd.giligili.domain.VideoCoin">
        select
            *
        from
            t_video_coin
        where
            videoId = #{videoId}
            and userId = #{userId}
    </select>

    <insert id="addVideoCoin" parameterType="com.zzd.giligili.domain.VideoCoin">
        insert into
            t_video_coin(
                userId,
                videoId,
                amount,
                createTime
        )values(
               #{userId},
               #{videoId},
               #{amount},
               #{createTime}
        )
    </insert>

    <update id="updateVideoCoin" parameterType="com.zzd.giligili.domain.VideoCoin">
        update
            t_video_coin
        set
            amount = #{amount},
            updateTime = #{updateTime}
        where
            videoId = #{videoId}
            and userId = #{userId}
    </update>

    <select id="getVideoCoinsAmount" parameterType="java.lang.Long" resultType="java.lang.Long">
        select
            sum(amount)
        from
            t_video_coin
        where
            videoId = #{videoId}
    </select>

    <insert id="addVideoComment" parameterType="com.zzd.giligili.domain.VideoComment">
        insert into
            t_video_comment(
                videoId,
                userId,
                comment,
                replyUserId,
                rootId,
                createTime
        )values(
                   #{videoId},
                   #{userId},
                   #{comment},
                   #{replyUserId},
                   #{rootId},
                   #{createTime}
               )
    </insert>

    <select id="pageCountVideoComments" parameterType="java.util.Map" resultType="java.lang.Integer">
        select
            count(1)
        from
            t_video_comment
        where
            videoId = #{videoId}
            and rootId is null
    </select>

    <select id="pageListVideoComments" parameterType="java.util.Map" resultType="com.zzd.giligili.domain.VideoComment">
        select
            *
        from
            t_video_comment
        where
            videoId = #{videoId}
            and rootId is null
        order by id desc
        limit #{start}, #{limit}
    </select>

    <select id="batchGetVideoCommentsByRootIds" parameterType="java.util.List" resultType="com.zzd.giligili.domain.VideoComment">
        select
        *
        from
        t_video_comment
        where
        rootId in
        <foreach collection="rootIdList" item="rootId" open="(" close=")" separator=",">
            #{rootId}
        </foreach>
        order by id
    </select>

    <select id="getVideoDetails" parameterType="java.lang.Long" resultType="com.zzd.giligili.domain.Video">
        select
            *
        from
            t_video
        where
            id = #{id}
    </select>

    <insert id="addVideoView" parameterType="com.zzd.giligili.domain.VideoView">
        insert into
            t_video_view(
                videoId,
                userId,
                clientId,
                ip,
                createTime
            )values(
                #{videoId},
                #{userId},
                #{clientId},
                #{ip},
                #{createTime}
            )
    </insert>

    <select id="getVideoViewCounts" parameterType="java.lang.Long" resultType="java.lang.Integer">
        select
            count(1)
        from
            t_video_view
        where
            videoId = #{videoId}
    </select>

    <select id="getVideoView" parameterType="java.util.Map" resultType="com.zzd.giligili.domain.VideoView">
        select
        *
        from
        t_video_view
        where
        videoId = #{videoId}
        <if test="userId == null and clientId != null">
            and clientId = #{clientId} and userId is null
        </if>
        <if test="userId != null">
            and userId = #{userId}
        </if>
        <if test="ip != null and ip != '' ">
            and ip = #{ip}
        </if>
        <if test="today != null and today != '' ">
            and DATE_FORMAT(createTime,'%Y-%m-%d') = #{today}
        </if>
    </select>



    <select id="batchGetVideosByIds" resultType="com.zzd.giligili.domain.Video">
        select
        *
        from
        t_video
        <if test="idList != null and idList.size > 0">
            where
            id in
            <foreach collection="idList" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </if>

    </select>

    <insert id="batchAddVideoBinaryPictures" parameterType="java.util.List">
        insert into
        t_video_binary_picture(
        videoId,
        frameNo,
        url,
        videoTimestamp,
        createTime
        )
        values
        <foreach collection="pictureList" item="picture" separator=",">
            (
            #{picture.videoId},
            #{picture.frameNo},
            #{picture.url},
            #{picture.videoTimestamp},
            #{picture.createTime}
            )
        </foreach>
    </insert>


    <select id="getVideoTagsByVideoId" parameterType="java.lang.Long" resultType="com.zzd.giligili.domain.VideoTag">
        select
            tvt.videoId,
            tvt.tagId,
            tt.name tagName
        from
            t_video_tag tvt
            left join t_tag tt on tvt.tagId = tt.id
        where
            tvt.videoId = #{videoId}
    </select>
    <select id="getAllUserPreference" resultType="com.zzd.giligili.domain.UserPreference">
        SELECT
            userId,
            videoId,
            sum(CASE operationType
            WHEN 0 THEN 6
            WHEN 1 THEN 2
            WHEN 2 then 2
            ELSE 0 END) as `value`
        FROM
            t_video_operation
        GROUP BY userId, videoId
        ORDER BY userId, `value` DESC
    </select>
    <select id="listAll" resultType="com.zzd.giligili.domain.Video">
        select
            *
        from
            t_video
    </select>
    <select id="getVideosByUserId" parameterType="java.lang.Long"  resultType="com.zzd.giligili.domain.Video">
        select
            *
        from
            t_video
        where
            userId = #{userId}
    </select>
    <select id="getStarVideosByUserId" parameterType="java.lang.Long"
            resultType="com.zzd.giligili.domain.Video">
        SELECT
            v.*
        FROM
            t_video_collection vc
            left join t_video v
            on vc.videoId = v.id
            where vc.userId = #{userId}
    </select>
    <select id="listVideoWithDelete" resultType="com.zzd.giligili.domain.Video">
        select *
        from t_video
        where updateTime >= #{minUpdateTime}
    </select>

    <delete id="deleteVideoTags">
        delete from
            t_video_tag
        where
            videoId = #{videoId}
            and tagId in
        <foreach collection="tagIdList" item="tagId" open="(" close=")" separator=",">
            #{tagId}
        </foreach>
    </delete>

    <delete id="deleteVideoByUrl">
        delete from
            t_video
        where
            url = #{url}
    </delete>

</mapper>